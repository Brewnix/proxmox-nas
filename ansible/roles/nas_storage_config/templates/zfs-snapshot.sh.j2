#!/bin/bash
# ZFS Snapshot Management Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

SNAPSHOT_TYPE="${1:-daily}"
RETENTION_HOURLY=24
RETENTION_DAILY=7
RETENTION_WEEKLY=4
RETENTION_MONTHLY=12

# Logging
LOG_FILE="/var/log/zfs-snapshots.log"
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$SNAPSHOT_TYPE] $1" | tee -a "$LOG_FILE"
}

# Get list of ZFS datasets to snapshot
DATASETS=(
{% for pool in nas_zfs_pools | default([{'name': 'tank'}]) %}
{% for dataset in nas_datasets | default([{'name': 'nas-data'}, {'name': 'media'}, {'name': 'documents'}, {'name': 'backups'}]) %}
    "{{ pool.name }}/{{ dataset.name }}"
{% endfor %}
{% endfor %}
)

# Create snapshots
create_snapshots() {
    local snapshot_suffix
    case "$SNAPSHOT_TYPE" in
        hourly)
            snapshot_suffix="$(date '+%Y%m%d-%H%M')"
            ;;
        daily)
            snapshot_suffix="$(date '+%Y%m%d')"
            ;;
        weekly)
            snapshot_suffix="$(date '+%Y-W%U')"
            ;;
        monthly)
            snapshot_suffix="$(date '+%Y%m')"
            ;;
        *)
            log "ERROR: Unknown snapshot type: $SNAPSHOT_TYPE"
            exit 1
            ;;
    esac
    
    for dataset in "${DATASETS[@]}"; do
        if zfs list "$dataset" >/dev/null 2>&1; then
            snapshot_name="${dataset}@${SNAPSHOT_TYPE}-${snapshot_suffix}"
            log "Creating snapshot: $snapshot_name"
            if zfs snapshot "$snapshot_name"; then
                log "SUCCESS: Created $snapshot_name"
            else
                log "ERROR: Failed to create $snapshot_name"
            fi
        else
            log "WARNING: Dataset $dataset does not exist, skipping"
        fi
    done
}

# Clean old snapshots
cleanup_snapshots() {
    local retention
    case "$SNAPSHOT_TYPE" in
        hourly)
            retention=$RETENTION_HOURLY
            ;;
        daily)
            retention=$RETENTION_DAILY
            ;;
        weekly)
            retention=$RETENTION_WEEKLY
            ;;
        monthly)
            retention=$RETENTION_MONTHLY
            ;;
    esac
    
    for dataset in "${DATASETS[@]}"; do
        if zfs list "$dataset" >/dev/null 2>&1; then
            log "Cleaning old $SNAPSHOT_TYPE snapshots for $dataset (keeping $retention)"
            # Get snapshots older than retention period
            old_snapshots=$(zfs list -H -t snapshot -o name -s creation | \
                           grep "^${dataset}@${SNAPSHOT_TYPE}-" | \
                           head -n -"$retention")
            
            if [ -n "$old_snapshots" ]; then
                echo "$old_snapshots" | while read -r snapshot; do
                    log "Removing old snapshot: $snapshot"
                    if zfs destroy "$snapshot"; then
                        log "SUCCESS: Removed $snapshot"
                    else
                        log "ERROR: Failed to remove $snapshot"
                    fi
                done
            else
                log "No old $SNAPSHOT_TYPE snapshots to clean for $dataset"
            fi
        fi
    done
}

# Main execution
main() {
    log "Starting $SNAPSHOT_TYPE snapshot process"
    
    # Check if ZFS is available
    if ! command -v zfs >/dev/null 2>&1; then
        log "ERROR: ZFS command not found"
        exit 1
    fi
    
    # Create new snapshots
    create_snapshots
    
    # Clean old snapshots
    cleanup_snapshots
    
    log "Completed $SNAPSHOT_TYPE snapshot process"
}

# Execute main function
main "$@"
