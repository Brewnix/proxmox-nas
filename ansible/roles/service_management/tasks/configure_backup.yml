---
# Service Management - Backup Configuration Tasks
# Configure backup strategies for deployed services

- name: Create backup directory for service
  ansible.builtin.file:
    path: "/backup/{{ service.name }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  when: service.backup is defined and service.backup.enabled | default(false)

- name: Configure VM backup schedule
  ansible.builtin.cron:
    name: "Backup {{ service.name }} VM"
    minute: "{{ service.backup.schedule.minute | default('0') }}"
    hour: "{{ service.backup.schedule.hour | default('2') }}"
    day: "{{ service.backup.schedule.day | default('*') }}"
    month: "{{ service.backup.schedule.month | default('*') }}"
    weekday: "{{ service.backup.schedule.weekday | default('*') }}"
    job: "/usr/bin/vzdump {{ service.vmid }} --storage {{ service.backup.storage | default('local') }} --mode {{ service.backup.mode | default('snapshot') }} --compress {{ service.backup.compression | default('gzip') }} --mailto {{ service.backup.notification_email | default('') }}"
    state: "{{ 'present' if (service.backup.enabled | default(false)) else 'absent' }}"
    user: root
  when: 
    - service.type == 'vm'
    - service.backup is defined

- name: Configure container backup schedule
  ansible.builtin.cron:
    name: "Backup {{ service.name }} Container"
    minute: "{{ service.backup.schedule.minute | default('0') }}"
    hour: "{{ service.backup.schedule.hour | default('2') }}"
    day: "{{ service.backup.schedule.day | default('*') }}"
    month: "{{ service.backup.schedule.month | default('*') }}"
    weekday: "{{ service.backup.schedule.weekday | default('*') }}"
    job: "/usr/bin/vzdump {{ service.vmid }} --storage {{ service.backup.storage | default('local') }} --mode {{ service.backup.mode | default('stop') }} --compress {{ service.backup.compression | default('gzip') }} --mailto {{ service.backup.notification_email | default('') }}"
    state: "{{ 'present' if (service.backup.enabled | default(false)) else 'absent' }}"
    user: root
  when: 
    - service.type == 'container'
    - service.backup is defined

- name: Configure data volume backup
  ansible.builtin.cron:
    name: "Backup {{ service.name }} data volumes"
    minute: "{{ service.backup.data_schedule.minute | default('30') }}"
    hour: "{{ service.backup.data_schedule.hour | default('1') }}"
    day: "{{ service.backup.data_schedule.day | default('*') }}"
    month: "{{ service.backup.data_schedule.month | default('*') }}"
    weekday: "{{ service.backup.data_schedule.weekday | default('*') }}"
    job: "/usr/local/bin/backup-service-data.sh {{ service.name }} {{ service.backup.data_paths | join(' ') }}"
    state: "{{ 'present' if (service.backup.data_backup_enabled | default(false)) else 'absent' }}"
    user: root
  when: 
    - service.backup is defined
    - service.backup.data_paths is defined
    - service.backup.data_backup_enabled | default(false)

- name: Create backup retention script
  ansible.builtin.template:
    src: backup_retention.sh.j2
    dest: "/usr/local/bin/{{ service.name }}-backup-retention.sh"
    mode: '0755'
    owner: root
    group: root
  vars:
    service_name: "{{ service.name }}"
    retention_days: "{{ service.backup.retention_days | default(30) }}"
    backup_path: "/backup/{{ service.name }}"
  when: 
    - service.backup is defined
    - service.backup.enabled | default(false)

- name: Configure backup retention cleanup
  ansible.builtin.cron:
    name: "Cleanup old backups for {{ service.name }}"
    minute: "0"
    hour: "4"
    job: "/usr/local/bin/{{ service.name }}-backup-retention.sh"
    state: "{{ 'present' if (service.backup.enabled | default(false)) else 'absent' }}"
    user: root
  when: 
    - service.backup is defined
    - service.backup.enabled | default(false)

- name: Configure backup verification
  ansible.builtin.cron:
    name: "Verify backups for {{ service.name }}"
    minute: "0"
    hour: "6"
    weekday: "0"
    job: "/usr/local/bin/verify-backup.sh {{ service.name }}"
    state: "{{ 'present' if (service.backup.verification_enabled | default(false)) else 'absent' }}"
    user: root
  when: 
    - service.backup is defined
    - service.backup.verification_enabled | default(false)
