name: Standardized Submodule CI/CD Pipeline

on:
  push:
    branches: [ main, develop, dev ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/**'
      - 'docs/**'
      - 'config/**'
      - 'ansible/**'
      - '*.sh'
      - '*.yml'
      - '*.yaml'
  pull_request:
    branches: [ main, develop, dev ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/**'
      - 'docs/**'
      - 'config/**'
      - 'ansible/**'
      - '*.sh'
      - '*.yml'
      - '*.yaml'

env:
  CI_START_TIME: ${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}

jobs:
  # Security Scanning - Critical first check
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security-check.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Advanced secrets detection
        id: secrets-check
        run: |
          echo "üîç Scanning for secrets and sensitive data..."

          # Common secret patterns
          patterns=(
            "password.*="
            "secret.*="
            "key.*="
            "token.*="
            "api_key.*="
            "aws_access_key"
            "aws_secret_key"
            "private_key"
            "BEGIN.*PRIVATE"
            "ssh-rsa"
            "-----BEGIN"
          )

          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -r -i "$pattern" --include="*.sh" --include="*.yml" --include="*.yaml" --include="*.json" --include="*.env" . 2>/dev/null | grep -v "example\|template\|test\|mock\|fake\|dummy" | grep -v "#.*$pattern"; then
              echo "üö® Potential secret pattern found: $pattern"
              found_secrets=true
            fi
          done

          if [ "$found_secrets" = true ]; then
            echo "‚ùå Security violations detected"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ No obvious secrets detected"
            echo "status=passed" >> $GITHUB_OUTPUT
          fi

      - name: Security audit for dangerous patterns
        run: |
          echo "üîç Auditing for dangerous patterns..."

          dangerous_patterns=(
            "rm -rf /"
            "chmod 777"
            "curl.*|.*bash"
            "wget.*|.*bash"
            "eval.*\$"
            "sudo.*password"
            "ssh.*-o.*StrictHostKeyChecking=no"
            "curl.*-k"
            "wget.*--no-check-certificate"
          )

          for pattern in "${dangerous_patterns[@]}"; do
            if grep -r "$pattern" --include="*.sh" . 2>/dev/null | grep -v "#.*$pattern" | grep -v "example\|template\|test"; then
              echo "üö® Dangerous pattern found: $pattern"
              exit 1
            fi
          done
          echo "‚úÖ No dangerous patterns detected"

  # Code Quality Gates
  quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    needs: security-scan
    if: needs.security-scan.result == 'success'
    outputs:
      quality-status: ${{ steps.quality-check.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup linting tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint python3-pip jq curl
          pip3 install yamllint --break-system-packages || true

      - name: Enhanced shell script linting
        run: |
          echo "üîç Running shell script quality checks..."
          find . -name "*.sh" -type f | xargs -I {} sh -c '
            echo "Checking {}"
            shellcheck "{}" || echo "Shellcheck issues in {}"

            # Check for bash strict mode
            if ! head -5 "{}" | grep -q "set -euo pipefail"; then
              echo "‚ö†Ô∏è  Warning: {} may not use bash strict mode"
            fi

            # Check script length
            lines=$(wc -l < "{}")
            if [ "$lines" -gt 300 ]; then
              echo "‚ö†Ô∏è  Warning: {} is $lines lines long (consider splitting)"
            fi
          ' -- {}

      - name: YAML validation and linting
        run: |
          echo "üîç Validating YAML files..."
          find . -name "*.yml" -o -name "*.yaml" | xargs -I {} sh -c '
            echo "Validating {}"
            python3 -c "
            import yaml, sys
            try:
              with open('{}', 'r') as f:
                data = yaml.safe_load(f)
              print(f'‚úì Valid YAML: {}')
            except Exception as e:
              print(f'‚úó Invalid YAML in {}: {e}')
              sys.exit(1)
            " || exit 1
          ' -- {}

          # YAML linting
          find . -name "*.yml" -o -name "*.yaml" | xargs -I {} sh -c '
            yamllint "{}" || echo "YAML linting issues in {}"
          ' -- {}

      - name: Check script permissions and structure
        run: |
          echo "üîç Checking script permissions and structure..."

          # Check executable permissions
          find scripts -name "*.sh" -type f | while read -r file; do
            if [[ ! -x "$file" ]]; then
              echo "‚ö†Ô∏è  Script not executable: $file"
              chmod +x "$file"
            fi
          done

          # Check for required files
          required_files=("README.md" "dev-setup.sh" "local-test.sh" "validate-config.sh")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ö†Ô∏è  Missing recommended file: $file"
            fi
          done

      - name: Quality gate assessment
        id: quality-check
        run: |
          echo "üîç Assessing code quality..."

          # Count issues
          shellcheck_issues=$(find . -name "*.sh" -exec shellcheck {} \; 2>&1 | grep -c "SC" || true)
          yaml_issues=$(find . -name "*.yml" -o -name "*.yaml" -exec yamllint {} \; 2>&1 | grep -c "error\|warning" || true)

          total_issues=$((shellcheck_issues + yaml_issues))

          echo "Shellcheck issues: $shellcheck_issues"
          echo "YAML issues: $yaml_issues"
          echo "Total quality issues: $total_issues"

          if [ $total_issues -gt 10 ]; then
            echo "‚ùå Too many quality issues ($total_issues)"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Quality gate passed ($total_issues issues)"
            echo "status=passed" >> $GITHUB_OUTPUT
          fi

  # Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gate]
    if: needs.security-scan.result == 'success' && needs.quality-gate.result == 'success'
    outputs:
      test-status: ${{ steps.test-results.outputs.status }}
      coverage: ${{ steps.test-results.outputs.coverage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          echo "üîß Setting up test environment..."
          sudo apt-get update
          sudo apt-get install -y curl wget jq git

          # Run dev setup if available
          if [[ -f "./dev-setup.sh" ]]; then
            chmod +x ./dev-setup.sh
            ./dev-setup.sh || echo "Dev setup completed with warnings"
          fi

      - name: Run configuration validation
        run: |
          echo "üîç Running configuration validation..."
          if [[ -f "./validate-config.sh" ]]; then
            chmod +x ./validate-config.sh
            ./validate-config.sh || echo "Config validation completed with warnings"
          fi

      - name: Execute test suite
        run: |
          echo "üß™ Running test suite..."

          # Run local tests if available
          if [[ -f "./local-test.sh" ]]; then
            chmod +x ./local-test.sh
            ./local-test.sh
            test_exit_code=$?
          else
            echo "‚ö†Ô∏è  No local-test.sh found, running basic checks"
            # Basic checks if no test script
            find scripts -name "*.sh" -exec bash -n {} \; 2>&1 || true
            test_exit_code=$?
          fi

          # Run additional test types if they exist
          if [[ -d "tests" ]]; then
            echo "Running additional tests from tests/ directory..."
            find tests -name "*.sh" -exec chmod +x {} \;
            find tests -name "*.sh" -exec {} \; || echo "Some tests failed"
          fi

          exit $test_exit_code

      - name: Generate test report
        id: test-results
        run: |
          echo "üìä Generating test report..."

          # Basic test metrics (can be enhanced with proper test framework)
          total_scripts=$(find scripts -name "*.sh" 2>/dev/null | wc -l)
          test_scripts=$(find tests -name "*.sh" 2>/dev/null | wc -l)

          echo "Total scripts: $total_scripts"
          echo "Test scripts: $test_scripts"

          # Calculate basic coverage estimate
          if [ $total_scripts -gt 0 ]; then
            coverage=$(( (test_scripts * 100) / total_scripts ))
            echo "Estimated test coverage: ${coverage}%"
            echo "coverage=${coverage}%" >> $GITHUB_OUTPUT
          else
            echo "coverage=0%" >> $GITHUB_OUTPUT
          fi

          echo "status=completed" >> $GITHUB_OUTPUT

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            logs/
            *.log
          if-no-files-found: ignore

  # Performance Benchmarking
  performance:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gate, test]
    if: needs.security-scan.result == 'success' && needs.quality-gate.result == 'success' && needs.test.result != 'failure'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup benchmarking tools
        run: |
          sudo apt-get update
          sudo apt-get install -y time bc jq

      - name: Benchmark script execution
        run: |
          echo "‚è±Ô∏è  Running performance benchmarks..."

          echo "| Script | Execution Time | Memory Usage | Exit Code |" > performance-report.md
          echo "|--------|----------------|--------------|-----------|" >> performance-report.md

          # Benchmark core scripts
          core_scripts=("scripts/core/init.sh" "scripts/core/config.sh" "scripts/core/logging.sh" "dev-setup.sh" "local-test.sh" "validate-config.sh")

          for script in "${core_scripts[@]}"; do
            if [ -f "$script" ] && [ -x "$script" ]; then
              echo "Benchmarking $script..."

              # Run script with timing
              start_time=$(date +%s.%3N)
              /usr/bin/time -f "%e %M %x" bash "$script" 2>time_output.log >script_output.log || true
              end_time=$(date +%s.%3N)

              execution_time=$(cat time_output.log | awk '{print $1}')
              memory_usage=$(cat time_output.log | awk '{print $2}')
              exit_code=$(cat time_output.log | awk '{print $3}')

              echo "| $script | ${execution_time}s | ${memory_usage}KB | $exit_code |" >> performance-report.md
              echo "‚úì $script: ${execution_time}s, ${memory_usage}KB, exit: $exit_code"
            fi
          done

          cat performance-report.md

      - name: Performance analysis
        run: |
          echo "üîç Analyzing performance patterns..."

          # Check for performance anti-patterns
          if grep -r "sleep.*[0-9]" --include="*.sh" . 2>/dev/null | grep -v "#"; then
            echo "‚ö†Ô∏è  Sleep statements found - may impact performance"
          fi

          # Check for inefficient patterns
          if grep -r "for.*in.*\$\(" --include="*.sh" . 2>/dev/null; then
            echo "‚ö†Ô∏è  Command substitution in loops detected - potential performance issue"
          fi

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md

  # Final Status Report
  status-report:
    name: CI Status Report
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gate, test, performance]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download performance report
        uses: actions/download-artifact@v4
        with:
          name: performance-report
          path: ./reports/
        continue-on-error: true

      - name: Generate comprehensive status report
        run: |
          echo "# Submodule CI Status Report" > ci-status-report.md
          echo "Generated: $(date)" >> ci-status-report.md
          echo "Repository: ${{ github.repository }}" >> ci-status-report.md
          echo "Branch: ${{ github.ref_name }}" >> ci-status-report.md
          echo "Commit: ${{ github.sha }}" >> ci-status-report.md
          echo "" >> ci-status-report.md

          echo "## Pipeline Results:" >> ci-status-report.md
          echo "- üîí Security Scan: ${{ needs.security-scan.result }}" >> ci-status-report.md
          echo "- üîç Quality Gate: ${{ needs.quality-gate.result }}" >> ci-status-report.md
          echo "- üß™ Test Suite: ${{ needs.test.result }}" >> ci-status-report.md
          echo "- ‚ö° Performance: ${{ needs.performance.result }}" >> ci-status-report.md
          echo "" >> ci-status-report.md

          echo "## Key Metrics:" >> ci-status-report.md
          echo "- Test Coverage: ${{ needs.test.outputs.coverage }}" >> ci-status-report.md
          echo "- Security Status: ${{ needs.security-scan.outputs.security-status }}" >> ci-status-report.md
          echo "- Quality Status: ${{ needs.quality-gate.outputs.quality-status }}" >> ci-status-report.md
          echo "" >> ci-status-report.md

          # Add performance data if available
          if [ -f "reports/performance-report.md" ]; then
            echo "## Performance Metrics:" >> ci-status-report.md
            cat reports/performance-report.md >> ci-status-report.md
            echo "" >> ci-status-report.md
          fi

          echo "## Recommendations:" >> ci-status-report.md
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "- üî¥ CRITICAL: Address security vulnerabilities immediately" >> ci-status-report.md
          fi
          if [[ "${{ needs.quality-gate.result }}" == "failure" ]]; then
            echo "- üü° HIGH: Fix code quality issues" >> ci-status-report.md
          fi
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "- üü† MEDIUM: Investigate test failures" >> ci-status-report.md
          fi
          if [[ "${{ needs.performance.result }}" == "failure" ]]; then
            echo "- üü¢ LOW: Review performance metrics" >> ci-status-report.md
          fi
          echo "" >> ci-status-report.md

          echo "## Next Steps:" >> ci-status-report.md
          echo "1. Review detailed reports in workflow artifacts" >> ci-status-report.md
          echo "2. Address any critical or high-priority issues" >> ci-status-report.md
          echo "3. Consider merging to main branch if all checks pass" >> ci-status-report.md

          cat ci-status-report.md

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: ci-status-report
          path: ci-status-report.md

      - name: Send failure notification
        if: failure()
        run: |
          echo "üö® Submodule CI Pipeline Failed" > failure-notification.md
          echo "Repository: ${{ github.repository }}" >> failure-notification.md
          echo "Branch: ${{ github.ref_name }}" >> failure-notification.md
          echo "Commit: ${{ github.sha }}" >> failure-notification.md
          echo "" >> failure-notification.md
          echo "Check the CI status report for details." >> failure-notification.md
          echo "" >> failure-notification.md
          echo "## Failed Checks:" >> failure-notification.md
          echo "- Security: ${{ needs.security-scan.result }}" >> failure-notification.md
          echo "- Quality: ${{ needs.quality-gate.result }}" >> failure-notification.md
          echo "- Tests: ${{ needs.test.result }}" >> failure-notification.md
          echo "- Performance: ${{ needs.performance.result }}" >> failure-notification.md

          cat failure-notification.md

      - name: Upload failure notification
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-failure-notification
          path: failure-notification.md
